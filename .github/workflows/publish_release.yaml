name: Publish release

on:
  workflow_call:
    inputs:
      release_version:
        description: A version of the release
        required: true
        type: string
      prerelease:
        description: A flag whether the release is pre-release or not
        required: true
        type: boolean
    outputs:
      published_tag:
        description: The tag of the published release
        value: ${{ jobs.publish_release.outputs.published_tag }}

jobs:
  publish_release:
    runs-on: ubuntu-latest
    outputs:
      published_tag: ${{ steps.get_published_tag.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get published flag
        id: get_published_flag
        run: |
          is_published=$(gh api /repos/{owner}/{repo}/releases --jq '.[] | select(.tag_name == "${{ inputs.release_version }}") | .draft | not')
          echo "value=$(test "${is_published}" != '' && echo "${is_published}" || echo 'false')"  >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update draft release
        if: steps.get_published_flag.outputs.value == 'false'
        id: create_or_update_draft_release
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yaml
          version: ${{ inputs.release_version }}
          tag: ${{ inputs.release_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish release
        if: steps.get_published_flag.outputs.value == 'false'
        run: |
          gh api /repos/{owner}/{repo}/releases/${{ steps.create_or_update_draft_release.outputs.id }} \
            --field release_id=${{ steps.create_or_update_draft_release.outputs.id }} \
            --field prerelease=${{ inputs.prerelease }} \
            --field draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get publieshd tag
        id: get_published_tag
        run: echo "value=$(gh api /repos/{owner}/{repo}/releases/${{ inputs.release_id }} --jq '.tag_name')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
