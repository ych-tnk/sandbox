name: Dispatch release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: Select a release type
        required: true
        type: choice
        options:
          - 'regular'
          - 'pre'
          - 'migrationtest'

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.get_release_id_of_latest_release.outputs.value }}
      release_version: ${{ steps.get_release_version_of_latest_release.outputs.value }}
    permissions:
      contents: write # contents write permission is required to obtain draft releases.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest release
        id: get_latest_release
        run: echo "value=$(gh api /repos/{owner}/{repo}/releases --jq '. | sort_by(.created_at) | reverse | .[0]')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release_id of latest release
        id: get_release_id_of_latest_release
        run: echo "value=${{ fromJson(steps.get_latest_release.outputs.value)['id'] }}" >> $GITHUB_OUTPUT

      - name: Get release_vesion of latest release
        id: get_release_version_of_latest_release
        run: |
          tag_name=${{ fromJson(steps.get_latest_release.outputs.value)['tag_name'] }}
          release_vesion=${tag_name}${{ github.event.inputs.release_type != 'regular' && format('-{0}', github.event.inputs.release_type) || '' }}
          echo "value=${release_vesion}" >> $GITHUB_OUTPUT

      - name: Check if release_vesion has already been published
        run: |
          gh api /repos/{owner}/{repo}/releases -q '.[] | select(.draft != true) | .tag_name' \
          | test $(grep --line-regexp --count "${{ steps.get_release_version_of_latest_release.outputs.value }}") -eq 0 \
          || (echo "${{ steps.get_release_version_of_latest_release.outputs.value }} is already published" && exit 1)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_gem_version:
    name: Update gem version
    uses: ./.github/workflows/update_gem_version.yaml
    needs: prepare_release
    permissions:
      contents: write 
      pull-requests: write
    with:
      version: ${{ needs.prepare_release.outputs.release_version }}
      version_file: sandbox.gemspec
    secrets:
      pr_approvable_token: ${{ secrets.TEST }}

  publish_release:
    name: Publish release
    uses: ./.github/workflows/publish_release.yaml
    needs:
      - prepare_release
      - update_gem_version
    permissions:
      contents: write
    with:
      release_id: ${{ needs.prepare_release.outputs.release_id }}
      release_version: ${{ needs.prepare_release.outputs.release_version }}
      prerelease: ${{ github.event.inputs.release_type != 'regular' }}

  publish_gem:
    name: Publish gem
    uses: ./.github/workflows/publish_gem.yaml
    needs: publish_release
    permissions:
      contents: read
      packages: write
    with:
      gem_name: sandbox
