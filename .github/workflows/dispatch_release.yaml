name: Dispatch release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: Select a release type
        required: true
        type: choice
        options:
          - 'regular'
          - 'pre'
          - 'migrationtest'

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      next_release_version: ${{ steps.resolve_next_release_version.outputs.value }}
    permissions:
      contents: read
      pull-requests: write # write permission is required to obtain draft releases.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Resolve next release vesion
        id: resolve_next_release_version
        run: |
          latest_release_version=$(gh api /repos/{owner}/{repo}/releases --jq '. | sort_by(.created_at) | reverse | .[0].tag_name')
          latest_release_version_core=$(echo "${latest_release_version}" | sed -e 's/^\(v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*$/\1/')
          next_release_vesion=${latest_release_version_core}${{ github.event.inputs.release_type != 'regular' && format('-{0}', github.event.inputs.release_type) || '' }}
          echo "value=${next_release_vesion}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if next release vesion has already been published
        run: |
          gh api /repos/{owner}/{repo}/releases -q '.[] | select(.draft != true) | .tag_name' \
          | test $(grep --line-regexp --count "${{ steps.resolve_next_release_version.outputs.value }}") -eq 0 \
          || (echo "${{ steps.resolve_next_release_version.outputs.value }} is already published" && exit 1)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_gem_version:
    uses: ./.github/workflows/update_gem_version.yaml
    needs: prepare_release
    permissions:
      contents: write
      pull-requests: write
    with:
      version: ${{ needs.prepare_release.outputs.next_release_version }}
      gemspec_path: sandbox.gemspec
    secrets:
      pr_approvable_token: ${{ secrets.TEST }}

  create_or_update_draft_release:
    runs-on: ubuntu-latest
    needs:
      - prepare_release
      - update_gem_version
    outputs:
      created_or_updated_draft_release_id: ${{ steps.create_or_update_draft_release.outputs.id }}
    steps:
      - name: Create or update draft release
        id: create_or_update_draft_release
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yaml
          version: ${{ needs.prepare_release.outputs.next_release_version }}
          tag: ${{ needs.prepare_release.outputs.next_release_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_release:
    uses: ./.github/workflows/publish_release.yaml
    needs: create_or_update_draft_release
    permissions:
      contents: write
    with:
      release_id: ${{ needs.create_or_update_draft_release.outputs.created_or_updated_draft_release_id }}
      prerelease: ${{ github.event.inputs.release_type != 'regular' }}

  publish_gem:
    uses: ./.github/workflows/publish_gem.yaml
    needs: publish_release
    permissions:
      contents: read
      packages: write
    with:
      repository_tag: ${{ needs.publish_release.outputs.published_tag }}
      gemspec_path: sandbox.gemspec
