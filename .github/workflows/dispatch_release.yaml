name: Dispatch release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: Select a release type
        required: true
        type: choice
        options:
          - 'ga'
          - 'rc'

jobs:
  check_releasablility:
    runs-on: ubuntu-latest
    outputs:
      latest_release_tag: ${{ steps.get_latest_release.outputs.tag }}
      latest_release_type: ${{ steps.get_latest_release.outputs.type }}
      is_releasable: ${{ steps.check_releaseable_differences.outputs.has_diffrences }}
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get latest release
        id: get_latest_release
        run: |
          case "${{ github.event.inputs.release_type }}" in
            'ga')
              echo "tag=$(gh api /repos/{owner}/{repo}/releases --jq 'first(.[] | select(.prerelease != true) | select(.draft != true)).tag_name')" >> $GITHUB_OUTPUT
              echo 'type=ga' >> $GITHUB_OUTPUT
              ;;
            'rc')
              latest_release="$(gh api /repos/{owner}/{repo}/releases --jq 'first(.[] | select(.draft != true))')"
              echo "tag=$(echo "${latest_release}" | jq -j '.tag_name')" >> $GITHUB_OUTPUT
              echo "type=$(echo "${latest_release}" | jq -j '.prerelease')" == 'true' && echo 'rc' && echo 'ga'" >> $GITHUB_OUTPUT
              ;;
          esac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for releasable differences
        id: check_releaseable_differences
        run: |
          echo "has_diffrences=$(test -n "$(git diff --shortstat ${{ steps.get_latest_release.outputs.tag }}...)" && echo true || echo false)" >> $GITHUB_OUTPUT
          if [ "${has_diffrences}" == 'false' ]; then
            case "${{ github.event.inputs.release_type }}" in
              'ga')
                echo "::notice::The GA release publication is skipped because there is no difference between the latest GA release and HEAD."
                ;;
              'rc')
                echo "::notice::The RC release publication is skipped because there is no difference between the latest release and HEAD."
                ;;
            esac
          fi

  resolve_next_release_vesion:
    needs: check_releasablility
    if: needs.check_releasablility.outputs.is_releasable == 'true'
    runs-on: ubuntu-latest
    outputs:
      next_release_version: ${{ steps.resolve_next_release_version.outputs.value }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create or update draft release
        id: create_or_update_draft_release
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yaml
          prerelease: ${{ github.event.inputs.release_type != 'ga' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Resolve next release vesion
        id: resolve_next_release_version
        run: |
          version_core="$(echo "${{ steps.create_or_update_draft_release.outputs.tag_name }}" | sed -e 's/^v\([[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*$/\1/')"
          case "${{ github.event.inputs.release_type }}" in
            'ga')
              echo "value=${version_core}" >> $GITHUB_OUTPUT
              ;;
            'rc')
              if [ "${{ needs.check_releasablility.outputs.latest_release_type }}" == 'rc' ]; then
                echo "value=${version_core}-rc.$(( $(echo "${{ needs.check_releasablility.outputs.latest_release_tag }}" | sed -e 's/^v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+-\?[^\.]*\.\?\(.*\)$/\1/') + 1 ))"  >> $GITHUB_OUTPUT
              else
                echo "value=${version_core}-rc.1" >> $GITHUB_OUTPUT
              fi
              ;;
          esac

  update_gem_version:
    needs: resolve_next_release_vesion
    uses: ./.github/workflows/_update_gem_version.yaml
    permissions:
      contents: write
      pull-requests: write
    with:
      version: ${{ needs.resolve_next_release_vesion.outputs.next_release_version }}
      gemspec_path: sandbox.gemspec
    secrets:
      pr_approvable_token: ${{ secrets.TEST }}

  publish_latest_draft_release:
    needs: 
      - update_gem_version
      - resolve_next_release_vesion
    uses: ./.github/workflows/_publish_latest_draft_release.yaml
    permissions:
      contents: write
      pull-requests: write
    with:
      prerelease: ${{ github.event.inputs.release_type != 'ga' }}
      version: v${{ needs.resolve_next_release_vesion.outputs.next_release_version }}

  publish_gem:
    needs: publish_latest_draft_release
    uses: ./.github/workflows/_publish_gem.yaml
    permissions:
      contents: read
      packages: write
    with:
      repository_tag: ${{ needs.publish_latest_draft_release.outputs.published_tag }}
      gemspec_path: sandbox.gemspec
