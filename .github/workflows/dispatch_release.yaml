name: Dispatch release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: Select a release type
        required: true
        type: choice
        options:
          - 'ga'
          - 'rc'

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      next_release_version: ${{ steps.resolve_next_release_version.outputs.value }}
    permissions:
      # write permission is required to obtain draft releases.
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latst release vesion
        id: get_latest_release_version
        run: |
          latest_release_version=$(gh api /repos/{owner}/{repo}/releases --jq 'first(.[] | select(.draft != true)).tag_name')
          echo "value=${latest_release_version}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latst release type
        id: get_latest_release_type
        run: |
          pre_release_identifier=$(echo "${{ steps.get_latest_release_version.output.value }}" | sed -e 's/^v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+-\?\([^.]*\).*$/\1/')
          latest_release_type="${pre_release_identifier:-ga}"
          echo "value=${latest_release_type}" >> $GITHUB_OUTPUT

      - name: Get differences between latest release version and HEAD
        id: get_differences_between_latest_release_version_and_head
        run: |
          diff="$(git diff ${{ steps.get_latest_release_version.output.value }}...)"
          echo "value=${diff}" >> $GITHUB_OUTPUT

      - name: Check if there are unreleased differences or broader release
        run: |
          is_diff_exsists=$(test -n "{{ steps.get_differences_between_latest_release_version_and_head.output.value }}" && echo 'true' || echo 'false')
          is_broader_release=$(test "${{ steps.get_latest_release_type.output.value }}" = 'rc' -a "${{ github.event.inputs.release_type }}" == 'ga' && echo 'true' || echo 'false')
          test "${is_diff_exsists}" == 'true' -o "${is_broader_release}" == 'true' \
          || (echo "To publish a new release, it must either have unreleased differences or a broader release" && exit 1)

      - name: Resolve next release vesion
        id: resolve_next_release_version
        run: |
          latest_release_version_core=$(echo "${{ steps.get_latest_release_version.output.value }}" | sed -e 's/^\(v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*$/\1/')
          next_release_vesion=${latest_release_version_core}${{ github.event.inputs.release_type != 'ga' && format('-{0}', github.event.inputs.release_type) || '' }}
          echo "value=${next_release_vesion}" >> $GITHUB_OUTPUT

      - name: Check if next release vesion has already been published
        run: |
          gh api /repos/{owner}/{repo}/releases -q '.[] | select(.draft != true) | .tag_name' \
          | test $(grep --line-regexp --count "${{ steps.resolve_next_release_version.outputs.value }}") -eq 0 \
          || (echo "${{ steps.resolve_next_release_version.outputs.value }} is already published" && exit 1)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_gem_version:
    uses: ./.github/workflows/_update_gem_version.yaml
    needs: prepare_release
    permissions:
      contents: write
      pull-requests: write
    with:
      version: ${{ needs.prepare_release.outputs.next_release_version }}
      gemspec_path: sandbox.gemspec
    secrets:
      pr_approvable_token: ${{ secrets.TEST }}

  publish_release:
    uses: ./.github/workflows/_publish_release.yaml
    needs:
      - prepare_release
      - update_gem_version
    permissions:
      contents: write
      pull-requests: write
    with:
      release_version: ${{ needs.prepare_release.outputs.next_release_version }}
      prerelease: ${{ github.event.inputs.release_type != 'ga' }}

  publish_gem:
    uses: ./.github/workflows/_publish_gem.yaml
    needs: publish_release
    permissions:
      contents: read
      packages: write
    with:
      repository_tag: ${{ needs.publish_release.outputs.published_tag }}
      gemspec_path: sandbox.gemspec
