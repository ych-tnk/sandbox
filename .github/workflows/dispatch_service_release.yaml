name: Dispatch service release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: Select a release type
        required: true
        type: choice
        options:
          - 'ga'
          - 'rc'

jobs:
  resolve_release_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      next_core: ${{ steps.resolve_release_version.outputs.next_core }}
      next_micro: ${{ steps.resolve_release_version.outputs.next_micro }}
      next_modifier: ${{ steps.resolve_release_version.outputs.next_modifier }}
      next_version: ${{ steps.resolve_release_version.outputs.next_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get latest release tag name
        id: get_latest_release_tag_name
        run: |
          case "${{ github.event.inputs.release_type }}" in
            'ga')
              echo "value=$(gh release list --exclude-pre-releases --exclude-drafts --limit 1 | head -2 | cut -f 1 | tr -d '\n')" >> $GITHUB_OUTPUT
              ;;
            'rc')
              echo "value=$(gh release list --exclude-drafts --limit 1 | head -2 | cut -f 1 | tr -d '\n')" >> $GITHUB_OUTPUT
              ;;
          esac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest release type
        id: get_latest_release_type
        run: |
          if [ "$(gh release list --exclude-drafts --limit 1 | head -2 | cut -f 2)" == 'Pre-release' ]; then
            echo "value=rc" >> $GITHUB_OUTPUT
          else
            echo "value=ga" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check existence of releasable differences
        id: check_existence_releaseable_differences
        run: |
          diff="$(git diff --shortstat ${{ steps.get_latest_release_tag_name.outputs.value }}...)"
          if [ -n "${diff}" ]; then
            echo "has_diffrences=true" >> $GITHUB_OUTPUT
          else
            case "${{ github.event.inputs.release_type }}" in
              'ga')
                echo "::warning::The GA release publication is skipped because there is no difference between the latest GA release and HEAD."
                ;;
              'rc')
                echo "::warning::The RC release publication is skipped because there is no difference between the latest release and HEAD."
                ;;
            esac
            echo "has_diffrences=false" >> $GITHUB_OUTPUT
          fi

      - name: Resolve release version
        id: resolve_release_version
        run: |
          # Split latest version
          IFS=',' read -a latest_version_parts <<< $(echo "${{ steps.get_latest_release_tag_name.outputs.value}}" | sed -e 's/deploy-\([0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}\)-\?\([0-9]\+\)\?-\?\(rc\.\)\?\([0-9]\+\)\?/\1,\2,\4/g')
          latest_core="${latest_version_parts[0]}"
          latest_micro="${latest_version_parts[1]}"
          latest_modifier="${latest_version_parts[2]}"

          if [ "${{ steps.check_existence_releaseable_differences.outputs.has_diffrences }}" == 'true' ]; then
            # Resolve next core.
            next_core=$(date '+%Y.%m.%d')

            # Resolve next micro.
            next_micro="0"
            next_modifier="0"
            if [ "${next_core}" != "${latest_core}" ]; then
              # Reset the micro and modifier if the core is bumped.
              next_micro="0"
              next_modifier="0"
            else
              # Bump only the modifier if both the next and latest release type are rc.
              if [ "${{ github.event.inputs.release_type }}" == 'ga' ] || [ "${{ steps.get_latest_release_type.outputs.value }}" == 'ga' ]; then
                next_micro="$((${latest_micro:-0} + 1))"
              else
                next_micro="${latest_micro:-0}"
              fi
              next_modifier="$((${latest_modifier:--1} + 1))"
            fi

            # Build next version.
            next_version="deploy-${next_core}"
            if [ "${next_micro}" != "0" ]; then
              next_version="${next_version}-${next_micro}"
            fi
            if [ "${{ github.event.inputs.release_type }}" == 'rc' ]; then
              next_version="${next_version}-rc.${next_modifier}"
            fi

            echo "next_core=${next_core}" >> $GITHUB_OUTPUT
            echo "next_micro=${next_micro}" >> $GITHUB_OUTPUT
            echo "next_modifier=${next_modifier}" >> $GITHUB_OUTPUT
            echo "next_version=${next_version}" >> $GITHUB_OUTPUT
          else
            echo "next_core=${latest_core}" >> $GITHUB_OUTPUT
            echo "next_micro=${latest_micro}" >> $GITHUB_OUTPUT
            echo "next_modifier=${latest_modifier}" >> $GITHUB_OUTPUT
            echo "next_version=deploy-${{ steps.get_latest_release_tag_name.outputs.value }}" >> $GITHUB_OUTPUT
          fi

  publish_draft_release:
    needs: resolve_release_version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check existence of draft release
        id: check_existence_draft_release
        run: |
          published="$(test -n "$(gh api /repos/{owner}/{repo}/releases --jq '.[] | select(.tag_name == "${{ needs.resolve_release_version.outputs.value }}" and .draft == false)')" && echo 'true' || echo 'false')"
          if [ "${published}" == 'true' ]; then
            echo '::warning::The draft release publication skipped because the draft release has already been published.'
          fi
          echo "published=${published}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish draft release
        if: steps.check_existence_draft_release.outputs.published == 'false'
        uses: release-drafter/release-drafter@master
        with:
          config-name: release-drafter-service.yaml
          prerelease: ${{ github.event.inputs.release_type == 'rc' }}
          prerelease-identifier: ${{ github.event.inputs.release_type == 'rc' && format('{0}-{1}', needs.resolve_release_version.outputs.next_micro, 'rc') || '' }}
          publish: true
          tag: ${{ needs.resolve_release_version.outputs.next_version }}
          version: ${{ needs.resolve_release_version.outputs.next_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
